Function profiling
==================
  Message: None
  Time in 1 calls to Function.__call__: 4.696846e-05s
  Time in Function.fn.__call__: 1.788139e-05s (38.071%)
  Time in thunks: 1.120567e-05s (23.858%)
  Total compile time: 1.599559e+00s
    Theano Optimizer time: 2.829449e-01s
       Theano validate time: 6.389618e-05s
    Theano Linker time (includes C, CUDA code generation/compiling): 5.702710e-02s

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  80.9%    80.9%       0.000s       9.06e-06s     C        1        1   <class 'theano.compile.ops.Shape_i'>
  19.1%   100.0%       0.000s       2.15e-06s     C        1        1   <class 'theano.tensor.opt.MakeVector'>
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  80.9%    80.9%       0.000s       9.06e-06s     C        1        1   Shape_i{1}
  19.1%   100.0%       0.000s       2.15e-06s     C        1        1   MakeVector
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
  80.9%    80.9%       0.000s       9.06e-06s      1     0   Shape_i{1}(<TensorType(float64, matrix)>)
  19.1%   100.0%       0.000s       2.15e-06s      1     1   MakeVector(Shape_i{1}.0)
   ... (remaining 0 Apply instances account for 0.00%(0.00s) of the runtime)

Function profiling
==================
  Message: None
  Time in 1 calls to Function.__call__: 4.944526e+01s
  Time in Function.fn.__call__: 4.944499e+01s (99.999%)
  Time in thunks: 4.944225e+01s (99.994%)
  Total compile time: 1.129517e+03s
    Theano Optimizer time: 6.661881e+02s
       Theano validate time: 4.830870e+00s
    Theano Linker time (includes C, CUDA code generation/compiling): 4.631614e+02s

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  99.9%    99.9%      49.382s       1.23e+01s     Py       4        4   <class 'theano.scan_module.scan_op.Scan'>
   0.1%    99.9%       0.028s       3.02e-04s     C       93       93   <class 'theano.tensor.elemwise.Elemwise'>
   0.0%   100.0%       0.012s       3.99e-03s     C        3        3   <class 'theano.tensor.blas.Dot22'>
   0.0%   100.0%       0.009s       2.85e-04s     C       32       32   <class 'theano.compile.ops.DeepCopyOp'>
   0.0%   100.0%       0.005s       2.64e-04s     C       18       18   <class 'theano.tensor.basic.Alloc'>
   0.0%   100.0%       0.002s       3.09e-05s     C       52       52   <class 'theano.tensor.elemwise.DimShuffle'>
   0.0%   100.0%       0.002s       7.90e-04s     C        2        2   <class 'theano.tensor.blas.Gemm'>
   0.0%   100.0%       0.001s       1.03e-05s     C      118      118   <class 'theano.tensor.subtensor.Subtensor'>
   0.0%   100.0%       0.001s       1.75e-05s     C       54       54   <class 'theano.tensor.subtensor.IncSubtensor'>
   0.0%   100.0%       0.000s       4.70e-05s     C        9        9   <class 'theano.tensor.subtensor.AdvancedSubtensor1'>
   0.0%   100.0%       0.000s       3.89e-05s     C        6        6   <class 'theano.tensor.elemwise.Sum'>
   0.0%   100.0%       0.000s       1.74e-05s     Py       9        9   <class 'theano.tensor.subtensor.AdvancedIncSubtensor1'>
   0.0%   100.0%       0.000s       4.42e-06s     C       34       34   <class 'theano.compile.ops.Shape_i'>
   0.0%   100.0%       0.000s       5.25e-06s     C       12       12   <class 'theano.tensor.basic.ScalarFromTensor'>
   0.0%   100.0%       0.000s       2.46e-05s     C        2        2   <class 'theano.tensor.basic.Reshape'>
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  77.8%    77.8%      38.445s       3.84e+01s     Py       1        1   forall_inplace,cpu,grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&gra
  21.8%    99.6%      10.787s       1.08e+01s     Py       1        1   for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_f
   0.3%    99.8%       0.130s       1.30e-01s     Py       1        1   forall_inplace,cpu,grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&gra
   0.0%    99.9%       0.019s       1.91e-02s     Py       1        1   for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_f
   0.0%    99.9%       0.012s       3.99e-03s     C        3        3   Dot22
   0.0%    99.9%       0.009s       2.85e-04s     C       32       32   DeepCopyOp
   0.0%    99.9%       0.005s       2.64e-04s     C       18       18   Alloc
   0.0%    99.9%       0.003s       2.64e-04s     C       10       10   Elemwise{mul}
   0.0%    99.9%       0.002s       2.02e-03s     C        1        1   Elemwise{Composite{[Composite{[Composite{[Composite{[Switch(GE(i0, i1)
   0.0%    99.9%       0.002s       1.97e-03s     C        1        1   Elemwise{Composite{[true_div(mul(i0, i1), i2)]}}[(0, 1)]
   0.0%    99.9%       0.002s       1.92e-03s     C        1        1   Elemwise{Add{output_types_preference=transfer_type{0}}}[(0, 0)]
   0.0%   100.0%       0.002s       1.82e-03s     C        1        1   Elemwise{Composite{[sub(add(i0, i1), i2)]}}[(0, 1)]
   0.0%   100.0%       0.002s       1.70e-03s     C        1        1   Elemwise{Composite{[exp(mul(i0, i1))]}}[(0, 1)]
   0.0%   100.0%       0.002s       1.62e-03s     C        1        1   Elemwise{Composite{[Composite{[Composite{[Switch(i0, Switch(i1, i2, i3
   0.0%   100.0%       0.002s       7.90e-04s     C        2        2   Gemm{inplace}
   0.0%   100.0%       0.002s       1.58e-03s     C        1        1   Elemwise{Composite{[Composite{[Composite{[Composite{[Composite{[Switch
   0.0%   100.0%       0.001s       8.22e-04s     C        1        1   Elemwise{Composite{[tanh(add(i0, i1))]}}[(0, 0)]
   0.0%   100.0%       0.001s       3.80e-04s     C        2        2   Elemwise{Composite{[add(mul(i0, i1), mul(i0, i2), mul(i0, i3), mul(i0,
   0.0%   100.0%       0.001s       6.97e-04s     C        1        1   Elemwise{Composite{[mul(i0, log(i1))]}}
   0.0%   100.0%       0.001s       6.09e-04s     C        1        1   Elemwise{Composite{[Composite{[Composite{[Composite{[Composite{[Compos
   ... (remaining 85 Ops account for   0.03%(0.01s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
  77.8%    77.8%      38.445s       3.84e+01s      1   282   forall_inplace,cpu,grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_f
  21.8%    99.6%      10.787s       1.08e+01s      1   226   for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn}(
   0.3%    99.8%       0.130s       1.30e-01s      1   380   forall_inplace,cpu,grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_f
   0.0%    99.9%       0.019s       1.91e-02s      1   162   for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn}(
   0.0%    99.9%       0.009s       9.07e-03s      1    86   Dot22(Subtensor{int64:int64:}.0, W)
   0.0%    99.9%       0.008s       7.60e-03s      1    76   DeepCopyOp(Alloc.0)
   0.0%    99.9%       0.003s       2.92e-03s      1    41   Alloc(TensorConstant{0.0}, TensorConstant{9}, TensorConstant{20}, TensorConstant{
   0.0%    99.9%       0.003s       2.84e-03s      1   100   Dot22(W.T012345678, InplaceDimShuffle{1,0}.0)
   0.0%    99.9%       0.002s       2.02e-03s      1   144   Elemwise{Composite{[Composite{[Composite{[Composite{[Switch(GE(i0, i1), i2, i0)]}
   0.0%    99.9%       0.002s       1.97e-03s      1   263   Elemwise{Composite{[true_div(mul(i0, i1), i2)]}}[(0, 1)](InplaceDimShuffle{x,0,1,
   0.0%    99.9%       0.002s       1.92e-03s      1   105   Elemwise{Add{output_types_preference=transfer_type{0}}}[(0, 0)](Dot22.0, InplaceD
   0.0%    99.9%       0.002s       1.82e-03s      1   146   Elemwise{Composite{[sub(add(i0, i1), i2)]}}[(0, 1)](TensorConstant{-1}, Elemwise{
   0.0%    99.9%       0.002s       1.70e-03s      1   251   Elemwise{Composite{[exp(mul(i0, i1))]}}[(0, 1)](TensorConstant{(1, 1, 1, ..) of 1
   0.0%    99.9%       0.002s       1.62e-03s      1   103   Elemwise{Composite{[Composite{[Composite{[Switch(i0, Switch(i1, i2, i3), Switch(i
   0.0%    99.9%       0.002s       1.59e-03s      1   114   Alloc(TensorConstant{0.0}, Elemwise{Composite{[Composite{[Composite{[Composite{[C
   0.0%   100.0%       0.002s       1.58e-03s      1    85   Elemwise{Composite{[Composite{[Composite{[Composite{[Composite{[Switch(LT(i0, i1)
   0.0%   100.0%       0.001s       1.50e-03s      1   445   Gemm{inplace}(W, TensorConstant{-0.00999999977648}, x.T012345678, Elemwise{Mul{ou
   0.0%   100.0%       0.001s       1.21e-03s      1    27   Elemwise{mul,no_inplace}(TensorConstant{20}, <TensorType(int64, scalar)>)
   0.0%   100.0%       0.001s       8.22e-04s      1    89   Elemwise{Composite{[tanh(add(i0, i1))]}}[(0, 0)](Dot22.0, InplaceDimShuffle{x,0}.
   0.0%   100.0%       0.001s       7.07e-04s      1   447   Elemwise{Composite{[add(mul(i0, i1), mul(i0, i2), mul(i0, i3), mul(i0, i4), mul(i
   ... (remaining 428 Apply instances account for 0.04%(0.02s) of the runtime)


Scan Op profiling ( scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn )
==================
  Message: None
  Time in 1 calls of the op (for a total of 20 steps) 1.676702e-02s

  Total time spent in calling the VM 1.594090e-02s (95.073%)
  Total overhead (computing slices..) 8.261204e-04s (4.927%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  46.7%    46.7%       0.004s       3.14e-06s     C     1260       63   <class 'theano.tensor.subtensor.IncSubtensor'>
  34.7%    81.4%       0.003s       8.19e-07s     C     3600      180   <class 'theano.tensor.elemwise.Elemwise'>
  10.5%    91.9%       0.001s       8.29e-07s     C     1080       54   <class 'theano.tensor.subtensor.Subtensor'>
   6.7%    98.6%       0.001s       5.20e-07s     C     1100       55   <class 'theano.tensor.basic.ScalarFromTensor'>
   1.4%   100.0%       0.000s       6.46e-07s     C      180        9   <class 'theano.compile.ops.Shape_i'>
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  10.5%    10.5%       0.001s       8.29e-07s     C     1080       54   Subtensor{int8, int64}
   8.7%    19.2%       0.001s       4.10e-06s     C      180        9   IncSubtensor{InplaceSet;0, 1}
   8.4%    27.6%       0.001s       3.96e-06s     C      180        9   IncSubtensor{Set;0, 0}
   7.3%    34.9%       0.001s       3.45e-06s     C      180        9   IncSubtensor{InplaceSet;2, 2}
   7.0%    41.9%       0.001s       6.59e-07s     C      900       45   Elemwise{Composite{[Switch(GE(i0, i1), i2, Switch(i3, i2, i0))]}}
   6.7%    48.6%       0.001s       5.20e-07s     C     1100       55   ScalarFromTensor
   6.4%    55.1%       0.001s       3.03e-06s     C      180        9   IncSubtensor{InplaceSet;1, 2}
   6.2%    61.3%       0.001s       2.93e-06s     C      180        9   IncSubtensor{InplaceSet;1, 0}
   5.1%    66.4%       0.000s       2.41e-06s     C      180        9   Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3))]}}[(0, 0)]
   5.0%    71.4%       0.000s       2.37e-06s     C      180        9   Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3))]}}[(0, 3)]
   4.9%    76.3%       0.000s       2.30e-06s     C      180        9   IncSubtensor{InplaceSet;1, 1}
   4.7%    81.0%       0.000s       2.23e-06s     C      180        9   IncSubtensor{InplaceSet;0, 2}
   4.4%    85.4%       0.000s       6.92e-07s     C      540       27   Elemwise{mul,no_inplace}
   2.9%    88.3%       0.000s       4.52e-07s     C      540       27   Elemwise{Mul{output_types_preference=transfer_type{1}}}[(0, 1)]
   2.3%    90.6%       0.000s       1.08e-06s     C      180        9   Elemwise{Composite{[add(mul(i0, i1), i2)]}}
   1.8%    92.4%       0.000s       8.68e-07s     C      180        9   Elemwise{cos,no_inplace}
   1.4%    93.8%       0.000s       6.46e-07s     C      180        9   Shape_i{1}
   1.3%    95.1%       0.000s       6.34e-07s     C      180        9   Elemwise{add,no_inplace}
   1.3%    96.5%       0.000s       6.32e-07s     C      180        9   Elemwise{Composite{[sub(mul(i0, i1), i2)]}}
   1.2%    97.7%       0.000s       5.81e-07s     C      180        9   Elemwise{sin,no_inplace}
   ... (remaining 2 Ops account for   2.29%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
   7.1%     7.1%       0.001s       3.02e-05s     20   315   IncSubtensor{InplaceSet;0, 1}(IncSubtensor{Set;0, 0}.0, Elemwise{mul,no_inplace}.
   5.7%    12.8%       0.000s       2.40e-05s     20   360   IncSubtensor{InplaceSet;2, 2}(IncSubtensor{InplaceSet;1, 2}.0, TensorConstant{1.0
   5.1%    17.9%       0.000s       2.19e-05s     20   351   IncSubtensor{InplaceSet;1, 2}(IncSubtensor{InplaceSet;1, 1}.0, Elemwise{Composite
   4.8%    22.7%       0.000s       2.04e-05s     20   306   IncSubtensor{Set;0, 0}(TensorConstant{(3, 3) of 0.0}, Elemwise{Mul{output_types_p
   4.6%    27.4%       0.000s       1.97e-05s     20   333   IncSubtensor{InplaceSet;1, 0}(IncSubtensor{InplaceSet;0, 2}.0, Elemwise{Mul{outpu
   4.0%    31.3%       0.000s       1.68e-05s     20   261   Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3))]}}[(0, 3)](Elemwise{mul,no_inpl
   3.9%    35.2%       0.000s       1.64e-05s     20   278   Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3))]}}[(0, 0)](Elemwise{mul,no_inpl
   3.8%    39.0%       0.000s       1.61e-05s     20   342   IncSubtensor{InplaceSet;1, 1}(IncSubtensor{InplaceSet;1, 0}.0, Elemwise{Mul{outpu
   3.4%    42.4%       0.000s       1.46e-05s     20   324   IncSubtensor{InplaceSet;0, 2}(IncSubtensor{InplaceSet;0, 1}.0, Elemwise{Composite
   0.7%    43.1%       0.000s       3.08e-06s     20    64   Elemwise{Composite{[Switch(GE(i0, i1), i2, Switch(i3, i2, i0))]}}(TensorConstant{
   0.6%    43.8%       0.000s       2.56e-06s     20   305   IncSubtensor{Set;0, 0}(TensorConstant{(3, 3) of 0.0}, Elemwise{Mul{output_types_p
   0.6%    44.3%       0.000s       2.50e-06s     20   298   IncSubtensor{Set;0, 0}(TensorConstant{(3, 3) of 0.0}, Elemwise{Mul{output_types_p
   0.5%    44.9%       0.000s       2.18e-06s     20   239   Elemwise{Composite{[add(mul(i0, i1), i2)]}}(Subtensor{int8, int64}.0, Elemwise{si
   0.5%    45.3%       0.000s       2.09e-06s     20   299   IncSubtensor{Set;0, 0}(TensorConstant{(3, 3) of 0.0}, Elemwise{Mul{output_types_p
   0.5%    45.8%       0.000s       1.94e-06s     20   171   Subtensor{int8, int64}(<TensorType(float64, matrix)>, ScalarFromTensor.0, ScalarF
   0.4%    46.2%       0.000s       1.85e-06s     20   272   Elemwise{Composite{[add(mul(i0, i1), mul(i2, i3))]}}[(0, 0)](Elemwise{mul,no_inpl
   0.4%    46.7%       0.000s       1.82e-06s     20   237   Elemwise{Composite{[add(mul(i0, i1), i2)]}}(Subtensor{int8, int64}.0, Elemwise{si
   0.4%    47.1%       0.000s       1.81e-06s     20   233   Elemwise{Composite{[add(mul(i0, i1), i2)]}}(Subtensor{int8, int64}.0, Elemwise{si
   0.4%    47.5%       0.000s       1.79e-06s     20    63   Elemwise{Composite{[Switch(GE(i0, i1), i2, Switch(i3, i2, i0))]}}(TensorConstant{
   0.4%    47.9%       0.000s       1.79e-06s     20   211   Elemwise{cos,no_inplace}(Subtensor{int8, int64}.0)
   ... (remaining 341 Apply instances account for 52.06%(0.00s) of the runtime)


Scan Op profiling ( scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn )
==================
  Message: None
  Time in 1 calls of the op (for a total of 20 steps) 1.078705e+01s

  Total time spent in calling the VM 1.078482e+01s (99.979%)
  Total overhead (computing slices..) 2.222776e-03s (0.021%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  100.0%   100.0%      10.783s       5.39e-01s     Py      20        1   <class 'theano.scan_module.scan_op.Scan'>
   0.0%   100.0%       0.001s       1.11e-06s     C      540       27   <class 'theano.tensor.elemwise.Elemwise'>
   0.0%   100.0%       0.000s       1.09e-06s     C      180        9   <class 'theano.tensor.basic.Reshape'>
   0.0%   100.0%       0.000s       8.79e-07s     C      180        9   <class 'theano.compile.ops.Shape_i'>
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  100.0%   100.0%      10.783s       5.39e-01s     Py      20        1   for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_f
   0.0%   100.0%       0.000s       1.88e-06s     C      180        9   Elemwise{Mul{output_types_preference=transfer_type{0}}}[(0, 0)]
   0.0%   100.0%       0.000s       1.09e-06s     C      180        9   Reshape{2}
   0.0%   100.0%       0.000s       9.27e-07s     C      180        9   Elemwise{mul,no_inplace}
   0.0%   100.0%       0.000s       8.79e-07s     C      180        9   Shape_i{0}
   0.0%   100.0%       0.000s       5.18e-07s     C      180        9   Elemwise{Add{output_types_preference=transfer_type{1}}}[(0, 1)]
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
  100.0%   100.0%      10.783s       5.39e-01s     20    27   for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn}(
   0.0%   100.0%       0.000s       3.55e-06s     20    36   Reshape{2}(for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_f
   0.0%   100.0%       0.000s       3.05e-06s     20    45   Elemwise{Mul{output_types_preference=transfer_type{0}}}[(0, 0)](Reshape{2}.0, <Te
   0.0%   100.0%       0.000s       2.40e-06s     20    26   Elemwise{mul,no_inplace}(TensorConstant{0.5}, Elemwise{Add{output_types_preferenc
   0.0%   100.0%       0.000s       2.16e-06s     20     8   Shape_i{0}(template_copy80)
   0.0%   100.0%       0.000s       2.00e-06s     20    44   Elemwise{Mul{output_types_preference=transfer_type{0}}}[(0, 0)](Reshape{2}.0, <Te
   0.0%   100.0%       0.000s       1.87e-06s     20    42   Elemwise{Mul{output_types_preference=transfer_type{0}}}[(0, 0)](Reshape{2}.0, <Te
   0.0%   100.0%       0.000s       1.85e-06s     20    40   Elemwise{Mul{output_types_preference=transfer_type{0}}}[(0, 0)](Reshape{2}.0, <Te
   0.0%   100.0%       0.000s       1.76e-06s     20    17   Elemwise{Add{output_types_preference=transfer_type{1}}}[(0, 1)](TensorConstant{-1
   0.0%   100.0%       0.000s       1.74e-06s     20    43   Elemwise{Mul{output_types_preference=transfer_type{0}}}[(0, 0)](Reshape{2}.0, <Te
   0.0%   100.0%       0.000s       1.65e-06s     20    41   Elemwise{Mul{output_types_preference=transfer_type{0}}}[(0, 0)](Reshape{2}.0, <Te
   0.0%   100.0%       0.000s       1.63e-06s     20    37   Elemwise{Mul{output_types_preference=transfer_type{0}}}[(0, 0)](Reshape{2}.0, <Te
   0.0%   100.0%       0.000s       1.55e-06s     20    39   Elemwise{Mul{output_types_preference=transfer_type{0}}}[(0, 0)](Reshape{2}.0, <Te
   0.0%   100.0%       0.000s       1.54e-06s     20    38   Elemwise{Mul{output_types_preference=transfer_type{0}}}[(0, 0)](Reshape{2}.0, <Te
   0.0%   100.0%       0.000s       1.31e-06s     20    21   Elemwise{mul,no_inplace}(TensorConstant{0.5}, Elemwise{Add{output_types_preferenc
   0.0%   100.0%       0.000s       1.05e-06s     20    29   Reshape{2}(for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_f
   0.0%   100.0%       0.000s       1.04e-06s     20    32   Reshape{2}(for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_f
   0.0%   100.0%       0.000s       9.42e-07s     20     5   Shape_i{0}(template_copy53)
   0.0%   100.0%       0.000s       9.18e-07s     20     2   Shape_i{0}(template_copy26)
   0.0%   100.0%       0.000s       8.70e-07s     20     6   Shape_i{0}(template_copy62)
   ... (remaining 26 Apply instances account for 0.00%(0.00s) of the runtime)


Scan Op profiling ( scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn )
==================
  Message: None
  Time in 20 calls of the op (for a total of 15680 steps) 1.075472e+01s

  Total time spent in calling the VM 1.053664e+01s (97.972%)
  Total overhead (computing slices..) 2.180786e-01s (2.028%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  46.0%    46.0%       2.494s       9.82e-07s     C     2540160      162   <class 'theano.tensor.subtensor.IncSubtensor'>
  19.5%    65.5%       1.057s       7.49e-06s     Py    141120        9   <class 'theano.tensor.basic.Dot'>
  12.4%    77.9%       0.672s       3.66e-07s     C     1834560      117   <class 'theano.tensor.elemwise.Elemwise'>
   7.6%    85.4%       0.409s       4.84e-07s     C     846720       54   <class 'theano.tensor.subtensor.Subtensor'>
   7.3%    92.7%       0.396s       3.51e-07s     C     1128960       72   <class 'theano.tensor.elemwise.CAReduce'>
   4.6%    97.3%       0.248s       3.52e-07s     C     705600       45   <class 'theano.tensor.elemwise.DimShuffle'>
   2.7%   100.0%       0.146s       2.58e-07s     C     564480       36   <class 'theano.tensor.basic.ScalarFromTensor'>
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  21.3%    21.3%       1.155s       1.02e-06s     C     1128960       72   IncSubtensor{Set;0}
  19.5%    40.8%       1.057s       7.49e-06s     Py    141120        9   dot
  11.3%    52.1%       0.612s       5.42e-07s     C     1128960       72   IncSubtensor{InplaceSet;1}
   9.4%    61.5%       0.509s       3.61e-06s     C     141120        9   IncSubtensor{Inc;0}
   5.6%    67.1%       0.304s       5.39e-07s     C     564480       36   Subtensor{int32, int32}
   4.6%    71.7%       0.248s       3.52e-07s     C     705600       45   InplaceDimShuffle{}
   4.1%    75.8%       0.223s       3.96e-07s     C     564480       36   Reduce{minimum}{0}
   4.0%    79.8%       0.218s       1.54e-06s     C     141120        9   IncSubtensor{InplaceInc;1}
   3.3%    83.1%       0.177s       3.14e-07s     C     564480       36   Elemwise{Composite{[Composite{[Cast{int64}(Cast{int32}(i0))]}(add(i0, 
   3.2%    86.2%       0.173s       3.06e-07s     C     564480       36   Reduce{maximum}{0}
   3.0%    89.2%       0.161s       2.84e-07s     C     564480       36   Elemwise{Cast{int32}}
   2.7%    91.9%       0.146s       2.58e-07s     C     564480       36   ScalarFromTensor
   2.4%    94.2%       0.128s       4.53e-07s     C     282240       18   Elemwise{Composite{[Composite{[Switch(EQ(i0, i1), add(i2, i1), i0)]}(c
   2.2%    96.4%       0.117s       8.30e-07s     C     141120        9   Elemwise{Composite{[Composite{[Composite{[Composite{[Composite{[Compos
   1.6%    98.1%       0.089s       3.17e-07s     C     282240       18   Elemwise{floor,no_inplace}
   1.0%    99.0%       0.054s       3.81e-07s     C     141120        9   Subtensor{1}
   1.0%   100.0%       0.052s       3.65e-07s     C     141120        9   Subtensor{0}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
   3.0%     3.0%       0.163s       1.04e-05s   15680    35   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   2.1%     5.1%       0.114s       7.30e-06s   15680    34   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   2.1%     7.2%       0.114s       7.26e-06s   15680    27   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   2.1%     9.3%       0.113s       7.19e-06s   15680    33   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   2.1%    11.3%       0.111s       7.10e-06s   15680    31   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   2.0%    13.4%       0.111s       7.07e-06s   15680    32   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   2.0%    15.4%       0.111s       7.05e-06s   15680    28   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   2.0%    17.5%       0.110s       7.04e-06s   15680    29   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   2.0%    19.5%       0.110s       7.04e-06s   15680    30   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   1.7%    21.2%       0.090s       5.73e-06s   15680    16   IncSubtensor{Inc;0}(<TensorType(float32, vector)>, <TensorType(int16, scalar)>)
   1.0%    22.2%       0.055s       3.52e-06s   15680    14   IncSubtensor{Inc;0}(<TensorType(float32, vector)>, <TensorType(int16, scalar)>)
   1.0%    23.1%       0.053s       3.39e-06s   15680     6   IncSubtensor{Inc;0}(<TensorType(float32, vector)>, <TensorType(int16, scalar)>)
   1.0%    24.1%       0.053s       3.35e-06s   15680     4   IncSubtensor{Inc;0}(<TensorType(float32, vector)>, <TensorType(int16, scalar)>)
   1.0%    25.1%       0.053s       3.35e-06s   15680    12   IncSubtensor{Inc;0}(<TensorType(float32, vector)>, <TensorType(int16, scalar)>)
   1.0%    26.1%       0.053s       3.35e-06s   15680     0   IncSubtensor{Inc;0}(<TensorType(float32, vector)>, <TensorType(int16, scalar)>)
   1.0%    27.0%       0.052s       3.33e-06s   15680    10   IncSubtensor{Inc;0}(<TensorType(float32, vector)>, <TensorType(int16, scalar)>)
   0.9%    28.0%       0.051s       3.27e-06s   15680     8   IncSubtensor{Inc;0}(<TensorType(float32, vector)>, <TensorType(int16, scalar)>)
   0.9%    28.9%       0.050s       3.20e-06s   15680     2   IncSubtensor{Inc;0}(<TensorType(float32, vector)>, <TensorType(int16, scalar)>)
   0.5%    29.4%       0.029s       1.88e-06s   15680    26   IncSubtensor{InplaceInc;1}(IncSubtensor{Inc;0}.0, <TensorType(int16, scalar)>)
   0.5%    29.9%       0.026s       1.66e-06s   15680   197   IncSubtensor{Set;0}(TensorConstant{(2,) of 0.0}, Elemwise{Composite{[Composite{[C
   ... (remaining 475 Apply instances account for 70.09%(3.80s) of the runtime)


Scan Op profiling ( grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn )
==================
  Message: None
  Time in 1 calls of the op (for a total of 20 steps) 3.844324e+01s

  Total time spent in calling the VM 3.843916e+01s (99.989%)
  Total overhead (computing slices..) 4.081011e-03s (0.011%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  100.0%   100.0%      38.422s       1.92e+00s     Py      20        1   <class 'theano.scan_module.scan_op.Scan'>
   0.0%   100.0%       0.009s       1.25e-05s     C      720       36   <class 'theano.tensor.elemwise.Elemwise'>
   0.0%   100.0%       0.001s       1.76e-06s     C      540       27   <class 'theano.tensor.basic.Alloc'>
   0.0%   100.0%       0.001s       9.51e-07s     C      720       36   <class 'theano.compile.ops.Shape_i'>
   0.0%   100.0%       0.001s       1.19e-06s     C      540       27   <class 'theano.tensor.subtensor.Subtensor'>
   0.0%   100.0%       0.001s       1.42e-06s     C      360       18   <class 'theano.tensor.basic.Reshape'>
   0.0%   100.0%       0.000s       2.06e-06s     C      180        9   <class 'theano.tensor.elemwise.Sum'>
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  100.0%   100.0%      38.422s       1.92e+00s     Py      20        1   forall_inplace,cpu,scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn&sca
   0.0%   100.0%       0.008s       4.31e-05s     C      180        9   Elemwise{Add{output_types_preference=transfer_type{0}}}[(0, 0)]
   0.0%   100.0%       0.001s       1.76e-06s     C      540       27   Alloc
   0.0%   100.0%       0.001s       5.07e-06s     C      180        9   Elemwise{Mul{output_types_preference=transfer_type{1}}}[(0, 1)]
   0.0%   100.0%       0.000s       1.19e-06s     C      360       18   Subtensor{int64}
   0.0%   100.0%       0.000s       1.14e-06s     C      360       18   Shape_i{0}
   0.0%   100.0%       0.000s       2.06e-06s     C      180        9   Sum
   0.0%   100.0%       0.000s       1.79e-06s     C      180        9   Reshape{2}
   0.0%   100.0%       0.000s       7.62e-07s     C      360       18   Shape_i{1}
   0.0%   100.0%       0.000s       1.20e-06s     C      180        9   Subtensor{::-1}
   0.0%   100.0%       0.000s       1.10e-06s     C      180        9   Elemwise{mul,no_inplace}
   0.0%   100.0%       0.000s       1.05e-06s     C      180        9   Reshape{1}
   0.0%   100.0%       0.000s       7.62e-07s     C      180        9   Elemwise{Add{output_types_preference=transfer_type{1}}}[(0, 1)]
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
  100.0%   100.0%      38.422s       1.92e+00s     20    99   forall_inplace,cpu,scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn&scan_fn&grad_o
   0.0%   100.0%       0.008s       3.81e-04s     20   144   Elemwise{Add{output_types_preference=transfer_type{0}}}[(0, 0)](Subtensor{int64}.
   0.0%   100.0%       0.001s       2.62e-05s     20   135   Elemwise{Mul{output_types_preference=transfer_type{1}}}[(0, 1)](<TensorType(float
   0.0%   100.0%       0.000s       6.41e-06s     20    44   Alloc(TensorConstant{0.0}, TensorConstant{1}, <TensorType(int64, scalar)>, <Tenso
   0.0%   100.0%       0.000s       5.25e-06s     20   126   Subtensor{int64}(forall_inplace,cpu,scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_
   0.0%   100.0%       0.000s       4.77e-06s     20   116   Reshape{2}(forall_inplace,cpu,scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn&sca
   0.0%   100.0%       0.000s       4.21e-06s     20   147   Sum(Elemwise{Mul{output_types_preference=transfer_type{1}}}[(0, 1)].0)
   0.0%   100.0%       0.000s       4.11e-06s     20    53   Reshape{1}(<TensorType(float64, matrix)>, TensorConstant{(1,) of 784})
   0.0%   100.0%       0.000s       3.79e-06s     20    98   Elemwise{mul,no_inplace}(TensorConstant{0.5}, Elemwise{Add{output_types_preferenc
   0.0%   100.0%       0.000s       3.76e-06s     20    70   Alloc(TensorConstant{(1, 1) of 0.0}, Shape_i{0}.0, Shape_i{1}.0)
   0.0%   100.0%       0.000s       3.17e-06s     20   153   Sum(Elemwise{Mul{output_types_preference=transfer_type{1}}}[(0, 1)].0)
   0.0%   100.0%       0.000s       3.04e-06s     20    80   Subtensor{::-1}(Reshape{1}.0)
   0.0%   100.0%       0.000s       3.03e-06s     20    71   Alloc(TensorConstant{0.0}, TensorConstant{1}, Shape_i{0}.0, Shape_i{1}.0)
   0.0%   100.0%       0.000s       2.90e-06s     20   133   Elemwise{Mul{output_types_preference=transfer_type{1}}}[(0, 1)](<TensorType(float
   0.0%   100.0%       0.000s       2.85e-06s     20   128   Elemwise{Mul{output_types_preference=transfer_type{1}}}[(0, 1)](<TensorType(float
   0.0%   100.0%       0.000s       2.74e-06s     20   131   Elemwise{Mul{output_types_preference=transfer_type{1}}}[(0, 1)](<TensorType(float
   0.0%   100.0%       0.000s       2.54e-06s     20    89   Elemwise{Add{output_types_preference=transfer_type{1}}}[(0, 1)](TensorConstant{-1
   0.0%   100.0%       0.000s       2.54e-06s     20   110   Reshape{2}(forall_inplace,cpu,scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn&sca
   0.0%   100.0%       0.000s       2.48e-06s     20   130   Elemwise{Mul{output_types_preference=transfer_type{1}}}[(0, 1)](<TensorType(float
   0.0%   100.0%       0.000s       2.32e-06s     20   129   Elemwise{Mul{output_types_preference=transfer_type{1}}}[(0, 1)](<TensorType(float
   ... (remaining 134 Apply instances account for 0.01%(0.00s) of the runtime)


Scan Op profiling ( scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn&scan_fn&grad_of_scan_fn )
==================
  Message: None
  Time in 20 calls of the op (for a total of 15680 steps) 3.834135e+01s

  Total time spent in calling the VM 3.712907e+01s (96.838%)
  Total overhead (computing slices..) 1.212280e+00s (3.162%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  39.9%    39.9%       6.849s       1.16e-06s     C     5927040      378   <class 'theano.tensor.subtensor.IncSubtensor'>
  21.6%    61.4%       3.703s       8.75e-06s     Py    423360       27   <class 'theano.tensor.basic.Dot'>
  21.3%    82.7%       3.653s       4.88e-07s     C     7479360      477   <class 'theano.tensor.elemwise.Elemwise'>
   5.2%    87.9%       0.894s       5.28e-07s     C     1693440      108   <class 'theano.tensor.subtensor.Subtensor'>
   4.9%    92.8%       0.843s       3.74e-07s     C     2257920      144   <class 'theano.tensor.elemwise.CAReduce'>
   3.8%    96.7%       0.660s       4.25e-07s     C     1552320       99   <class 'theano.tensor.elemwise.DimShuffle'>
   2.0%    98.6%       0.343s       3.04e-07s     C     1128960       72   <class 'theano.tensor.basic.ScalarFromTensor'>
   0.9%    99.5%       0.153s       1.08e-06s     C     141120        9   <class 'theano.tensor.basic.Alloc'>
   0.5%   100.0%       0.079s       5.61e-07s     C     141120        9   <class 'theano.compile.ops.Shape_i'>
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  21.6%    21.6%       3.703s       8.75e-06s     Py    423360       27   dot
  15.0%    36.6%       2.580s       1.14e-06s     C     2257920      144   IncSubtensor{Set;0}
   7.8%    44.4%       1.342s       5.94e-07s     C     2257920      144   IncSubtensor{InplaceSet;1}
   6.3%    50.7%       1.085s       3.84e-06s     C     282240       18   IncSubtensor{Inc;0}
   5.5%    56.2%       0.946s       1.68e-06s     C     564480       36   IncSubtensor{InplaceInc;int32, int32}
   3.9%    60.2%       0.677s       1.60e-06s     C     423360       27   IncSubtensor{InplaceInc;1}
   3.8%    63.9%       0.650s       5.75e-07s     C     1128960       72   Subtensor{int32, int32}
   2.8%    66.7%       0.476s       3.74e-07s     C     1270080       81   InplaceDimShuffle{}
   2.6%    69.3%       0.449s       3.98e-07s     C     1128960       72   Reduce{minimum}{0}
   2.5%    71.8%       0.429s       3.80e-07s     C     1128960       72   Elemwise{Composite{[Composite{[Cast{int64}(Cast{int32}(i0))]}(add(i0, 
   2.3%    74.1%       0.394s       3.49e-07s     C     1128960       72   Reduce{maximum}{0}
   2.2%    76.3%       0.382s       3.39e-07s     C     1128960       72   Elemwise{Cast{int32}}
   2.0%    78.3%       0.343s       3.04e-07s     C     1128960       72   ScalarFromTensor
   1.6%    80.0%       0.281s       4.97e-07s     C     564480       36   Elemwise{Composite{[Composite{[Composite{[Switch(i0, Cast{float32}(i1)
   1.5%    81.5%       0.260s       4.61e-07s     C     564480       36   Elemwise{Composite{[EQ(GE(i0, i1), LE(i0, i2))]}}
   1.3%    82.8%       0.218s       1.55e-06s     C     141120        9   IncSubtensor{InplaceInc;0}
   1.3%    84.0%       0.218s       3.86e-07s     C     564480       36   Elemwise{floor,no_inplace}
   1.0%    85.1%       0.180s       1.28e-06s     C     141120        9   Elemwise{Composite{[Composite{[Composite{[add(i0, add(i1, i2))]}(i0, i
   1.0%    86.0%       0.165s       5.01e-07s     C     329280       21   Elemwise{sub,no_inplace}
   0.9%    86.9%       0.153s       1.08e-06s     C     141120        9   Alloc
   ... (remaining 24 Ops account for  13.08%(2.25s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
   1.2%     1.2%       0.200s       1.27e-05s   15680   1313   dot(InplaceDimShuffle{0,x}.0, InplaceDimShuffle{x,0}.0)
   1.1%     2.2%       0.186s       1.19e-05s   15680    98   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   1.1%     3.3%       0.182s       1.16e-05s   15680   1306   dot(InplaceDimShuffle{0,x}.0, InplaceDimShuffle{x,0}.0)
   1.0%     4.3%       0.171s       1.09e-05s   15680   1305   dot(InplaceDimShuffle{0,x}.0, InplaceDimShuffle{x,0}.0)
   1.0%     5.3%       0.171s       1.09e-05s   15680   1312   dot(InplaceDimShuffle{0,x}.0, InplaceDimShuffle{x,0}.0)
   1.0%     6.3%       0.170s       1.09e-05s   15680   1307   dot(InplaceDimShuffle{0,x}.0, InplaceDimShuffle{x,0}.0)
   1.0%     7.3%       0.169s       1.08e-05s   15680   1311   dot(InplaceDimShuffle{0,x}.0, InplaceDimShuffle{x,0}.0)
   1.0%     8.2%       0.166s       1.06e-05s   15680   1308   dot(InplaceDimShuffle{0,x}.0, InplaceDimShuffle{x,0}.0)
   1.0%     9.2%       0.166s       1.06e-05s   15680   1309   dot(InplaceDimShuffle{0,x}.0, InplaceDimShuffle{x,0}.0)
   1.0%    10.2%       0.166s       1.06e-05s   15680   1310   dot(InplaceDimShuffle{0,x}.0, InplaceDimShuffle{x,0}.0)
   0.7%    10.9%       0.125s       7.96e-06s   15680    79   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   0.7%    11.6%       0.125s       7.96e-06s   15680    77   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   0.7%    12.4%       0.125s       7.95e-06s   15680    78   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   0.7%    13.1%       0.122s       7.76e-06s   15680    76   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   0.7%    13.8%       0.119s       7.58e-06s   15680    72   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   0.7%    14.4%       0.119s       7.58e-06s   15680    75   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   0.7%    15.1%       0.116s       7.43e-06s   15680    73   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   0.7%    15.8%       0.116s       7.41e-06s   15680    74   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   0.7%    16.5%       0.115s       7.34e-06s   15680    96   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   0.6%    17.1%       0.112s       7.12e-06s   15680    88   dot(<TensorType(float64, matrix)>, IncSubtensor{InplaceInc;1}.0)
   ... (remaining 1303 Apply instances account for 82.88%(14.24s) of the runtime)


Scan Op profiling ( grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn )
==================
  Message: None
  Time in 1 calls of the op (for a total of 20 steps) 1.242270e-01s

  Total time spent in calling the VM 1.167724e-01s (93.999%)
  Total overhead (computing slices..) 7.454634e-03s (6.001%)

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  53.6%    53.6%       0.044s       1.22e-04s     C      360       18   <class 'theano.tensor.blas.Gemm'>
  14.6%    68.3%       0.012s       1.91e-06s     C     6300      315   <class 'theano.tensor.subtensor.IncSubtensor'>
  11.0%    79.3%       0.009s       9.48e-07s     C     9540      477   <class 'theano.tensor.elemwise.Elemwise'>
   8.6%    87.9%       0.007s       3.91e-05s     Py     180        9   <class 'theano.tensor.subtensor.AdvancedIncSubtensor1'>
   4.9%    92.8%       0.004s       2.22e-05s     C      180        9   <class 'theano.tensor.blas.Dot22'>
   3.2%    96.0%       0.003s       1.20e-06s     C     2160      108   <class 'theano.tensor.subtensor.Subtensor'>
   1.2%    97.2%       0.001s       8.93e-07s     C     1100       55   <class 'theano.tensor.basic.ScalarFromTensor'>
   1.1%    98.2%       0.001s       2.46e-06s     C      360       18   <class 'theano.tensor.elemwise.Sum'>
   0.9%    99.1%       0.001s       4.08e-06s     C      180        9   <class 'theano.tensor.basic.Alloc'>
   0.4%    99.6%       0.000s       9.95e-07s     C      360       18   <class 'theano.tensor.elemwise.DimShuffle'>
   0.4%   100.0%       0.000s       1.97e-06s     C      180        9   <class 'theano.compile.ops.Shape_i'>
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  53.6%    53.6%       0.044s       1.22e-04s     C      360       18   Gemm{no_inplace}
   8.6%    62.2%       0.007s       3.91e-05s     Py     180        9   AdvancedIncSubtensor1{no_inplace,inc}
   4.9%    67.1%       0.004s       2.22e-05s     C      180        9   Dot22
   4.3%    71.4%       0.004s       7.96e-07s     C     4460      223   Elemwise{mul}
   3.8%    75.2%       0.003s       1.43e-06s     C     2160      108   IncSubtensor{InplaceInc;6}
   2.3%    77.5%       0.002s       2.66e-06s     C      720       36   IncSubtensor{InplaceInc;3}
   1.7%    79.3%       0.001s       1.31e-06s     C     1080       54   Subtensor{int8, int64}
   1.5%    80.8%       0.001s       6.83e-06s     C      180        9   IncSubtensor{Inc;int8, ::}
   1.4%    82.1%       0.001s       1.56e-06s     C      720       36   IncSubtensor{InplaceInc;5}
   1.3%    83.4%       0.001s       1.48e-06s     C      720       36   IncSubtensor{InplaceInc;4}
   1.2%    84.7%       0.001s       9.77e-07s     C     1040       52   Elemwise{Composite{[Switch(GE(i0, i1), i2, Switch(i3, i2, i0))]}}
   1.2%    85.9%       0.001s       8.93e-07s     C     1100       55   ScalarFromTensor
   1.2%    87.0%       0.001s       5.28e-06s     C      180        9   IncSubtensor{Set;2, 2}
   1.1%    88.1%       0.001s       2.46e-06s     C      360       18   Sum{0}
   0.9%    89.0%       0.001s       4.08e-06s     C      180        9   Alloc
   0.9%    89.9%       0.001s       2.55e-06s     C      280       14   Elemwise{Mul{output_types_preference=transfer_type{0}}}[(0, 0)]
   0.8%    90.6%       0.001s       1.76e-06s     C      360       18   IncSubtensor{InplaceInc;1}
   0.7%    91.4%       0.001s       1.66e-06s     C      360       18   IncSubtensor{InplaceInc;2}
   0.7%    92.1%       0.001s       1.65e-06s     C      360       18   Elemwise{Composite{[add(Cast{float32}(i0), i1)]}}
   0.7%    92.8%       0.001s       8.03e-07s     C      720       36   Elemwise{Composite{[mul(mul(i0, i1), i2)]}}
   ... (remaining 27 Ops account for   7.19%(0.01s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
  12.5%    12.5%       0.010s       5.10e-04s     20   1029   Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, x_copy.T_rep
   5.5%    17.9%       0.004s       2.25e-04s     20   1019   Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, x_copy.T_rep
   5.3%    23.2%       0.004s       2.16e-04s     20   1023   Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, x_copy.T_rep
   4.6%    27.8%       0.004s       1.87e-04s     20   1031   Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, x_copy.T_rep
   4.5%    32.3%       0.004s       1.86e-04s     20   1021   Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, x_copy.T_rep
   4.5%    36.8%       0.004s       1.85e-04s     20   1027   Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, x_copy.T_rep
   4.4%    41.3%       0.004s       1.82e-04s     20   1025   Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, x_copy.T_rep
   4.4%    45.7%       0.004s       1.81e-04s     20   1035   Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, x_copy.T_rep
   4.1%    49.8%       0.003s       1.69e-04s     20   1033   Gemm{no_inplace}(<TensorType(float64, matrix)>, TensorConstant{1.0}, x_copy.T_rep
   2.7%    52.5%       0.002s       1.11e-04s     20   960   AdvancedIncSubtensor1{no_inplace,inc}(<TensorType(float64, matrix)>, InplaceDimSh
   2.5%    55.0%       0.002s       1.02e-04s     20   990   Dot22(InplaceDimShuffle{1,0}.0, W_copy.T_replace0)
   0.8%    55.8%       0.001s       3.31e-05s     20   963   AdvancedIncSubtensor1{no_inplace,inc}(<TensorType(float64, matrix)>, InplaceDimSh
   0.8%    56.6%       0.001s       3.21e-05s     20   957   AdvancedIncSubtensor1{no_inplace,inc}(<TensorType(float64, matrix)>, InplaceDimSh
   0.8%    57.4%       0.001s       3.08e-05s     20   958   AdvancedIncSubtensor1{no_inplace,inc}(<TensorType(float64, matrix)>, InplaceDimSh
   0.7%    58.1%       0.001s       2.97e-05s     20   959   AdvancedIncSubtensor1{no_inplace,inc}(<TensorType(float64, matrix)>, InplaceDimSh
   0.7%    58.8%       0.001s       2.95e-05s     20   956   AdvancedIncSubtensor1{no_inplace,inc}(<TensorType(float64, matrix)>, InplaceDimSh
   0.7%    59.5%       0.001s       2.93e-05s     20   962   AdvancedIncSubtensor1{no_inplace,inc}(<TensorType(float64, matrix)>, InplaceDimSh
   0.7%    60.2%       0.001s       2.88e-05s     20   961   AdvancedIncSubtensor1{no_inplace,inc}(<TensorType(float64, matrix)>, InplaceDimSh
   0.7%    60.9%       0.001s       2.75e-05s     20   955   AdvancedIncSubtensor1{no_inplace,inc}(<TensorType(float64, matrix)>, InplaceDimSh
   0.6%    61.5%       0.000s       2.39e-05s     20   1007   Elemwise{mul}(Dot22.0, <TensorType(float64, matrix)>)
   ... (remaining 1025 Apply instances account for 38.53%(0.03s) of the runtime)

Function profiling
==================
  Message: Sum of all printed profiles at exit excluding Scan op profile.
  Time in 2 calls to Function.__call__: 4.944531e+01s
  Time in Function.fn.__call__: 4.944501e+01s (99.999%)
  Time in thunks: 4.944226e+01s (99.994%)
  Total compile time: 1.131116e+03s
    Theano Optimizer time: 6.664710e+02s
       Theano validate time: 4.830934e+00s
    Theano Linker time (includes C, CUDA code generation/compiling): 4.632185e+02s

Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  99.9%    99.9%      49.382s       1.23e+01s     Py       4        4   <class 'theano.scan_module.scan_op.Scan'>
   0.1%    99.9%       0.028s       3.02e-04s     C       93       93   <class 'theano.tensor.elemwise.Elemwise'>
   0.0%   100.0%       0.012s       3.99e-03s     C        3        3   <class 'theano.tensor.blas.Dot22'>
   0.0%   100.0%       0.009s       2.85e-04s     C       32       32   <class 'theano.compile.ops.DeepCopyOp'>
   0.0%   100.0%       0.005s       2.64e-04s     C       18       18   <class 'theano.tensor.basic.Alloc'>
   0.0%   100.0%       0.002s       3.09e-05s     C       52       52   <class 'theano.tensor.elemwise.DimShuffle'>
   0.0%   100.0%       0.002s       7.90e-04s     C        2        2   <class 'theano.tensor.blas.Gemm'>
   0.0%   100.0%       0.001s       1.03e-05s     C      118      118   <class 'theano.tensor.subtensor.Subtensor'>
   0.0%   100.0%       0.001s       1.75e-05s     C       54       54   <class 'theano.tensor.subtensor.IncSubtensor'>
   0.0%   100.0%       0.000s       4.70e-05s     C        9        9   <class 'theano.tensor.subtensor.AdvancedSubtensor1'>
   0.0%   100.0%       0.000s       3.89e-05s     C        6        6   <class 'theano.tensor.elemwise.Sum'>
   0.0%   100.0%       0.000s       4.56e-06s     C       35       35   <class 'theano.compile.ops.Shape_i'>
   0.0%   100.0%       0.000s       1.74e-05s     Py       9        9   <class 'theano.tensor.subtensor.AdvancedIncSubtensor1'>
   0.0%   100.0%       0.000s       5.25e-06s     C       12       12   <class 'theano.tensor.basic.ScalarFromTensor'>
   0.0%   100.0%       0.000s       2.46e-05s     C        2        2   <class 'theano.tensor.basic.Reshape'>
   0.0%   100.0%       0.000s       2.15e-06s     C        1        1   <class 'theano.tensor.opt.MakeVector'>
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  77.8%    77.8%      38.445s       3.84e+01s     Py       1        1   forall_inplace,cpu,grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&gra
  21.8%    99.6%      10.787s       1.08e+01s     Py       1        1   for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_f
   0.3%    99.8%       0.130s       1.30e-01s     Py       1        1   forall_inplace,cpu,grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&gra
   0.0%    99.9%       0.019s       1.91e-02s     Py       1        1   for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_f
   0.0%    99.9%       0.012s       3.99e-03s     C        3        3   Dot22
   0.0%    99.9%       0.009s       2.85e-04s     C       32       32   DeepCopyOp
   0.0%    99.9%       0.005s       2.64e-04s     C       18       18   Alloc
   0.0%    99.9%       0.003s       2.64e-04s     C       10       10   Elemwise{mul}
   0.0%    99.9%       0.002s       2.02e-03s     C        1        1   Elemwise{Composite{[Composite{[Composite{[Composite{[Switch(GE(i0, i1)
   0.0%    99.9%       0.002s       1.97e-03s     C        1        1   Elemwise{Composite{[true_div(mul(i0, i1), i2)]}}[(0, 1)]
   0.0%    99.9%       0.002s       1.92e-03s     C        1        1   Elemwise{Add{output_types_preference=transfer_type{0}}}[(0, 0)]
   0.0%   100.0%       0.002s       1.82e-03s     C        1        1   Elemwise{Composite{[sub(add(i0, i1), i2)]}}[(0, 1)]
   0.0%   100.0%       0.002s       1.70e-03s     C        1        1   Elemwise{Composite{[exp(mul(i0, i1))]}}[(0, 1)]
   0.0%   100.0%       0.002s       1.62e-03s     C        1        1   Elemwise{Composite{[Composite{[Composite{[Switch(i0, Switch(i1, i2, i3
   0.0%   100.0%       0.002s       7.90e-04s     C        2        2   Gemm{inplace}
   0.0%   100.0%       0.002s       1.58e-03s     C        1        1   Elemwise{Composite{[Composite{[Composite{[Composite{[Composite{[Switch
   0.0%   100.0%       0.001s       8.22e-04s     C        1        1   Elemwise{Composite{[tanh(add(i0, i1))]}}[(0, 0)]
   0.0%   100.0%       0.001s       3.80e-04s     C        2        2   Elemwise{Composite{[add(mul(i0, i1), mul(i0, i2), mul(i0, i3), mul(i0,
   0.0%   100.0%       0.001s       6.97e-04s     C        1        1   Elemwise{Composite{[mul(i0, log(i1))]}}
   0.0%   100.0%       0.001s       6.09e-04s     C        1        1   Elemwise{Composite{[Composite{[Composite{[Composite{[Composite{[Compos
   ... (remaining 86 Ops account for   0.03%(0.01s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
  77.8%    77.8%      38.445s       3.84e+01s      1   282   forall_inplace,cpu,grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_f
  21.8%    99.6%      10.787s       1.08e+01s      1   226   for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn}(
   0.3%    99.8%       0.130s       1.30e-01s      1   380   forall_inplace,cpu,grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_fn&grad_of_scan_f
   0.0%    99.9%       0.019s       1.91e-02s      1   162   for{cpu,scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn&scan_fn}(
   0.0%    99.9%       0.009s       9.07e-03s      1    86   Dot22(Subtensor{int64:int64:}.0, W)
   0.0%    99.9%       0.008s       7.60e-03s      1    76   DeepCopyOp(Alloc.0)
   0.0%    99.9%       0.003s       2.92e-03s      1    41   Alloc(TensorConstant{0.0}, TensorConstant{9}, TensorConstant{20}, TensorConstant{
   0.0%    99.9%       0.003s       2.84e-03s      1   100   Dot22(W.T012345678, InplaceDimShuffle{1,0}.0)
   0.0%    99.9%       0.002s       2.02e-03s      1   144   Elemwise{Composite{[Composite{[Composite{[Composite{[Switch(GE(i0, i1), i2, i0)]}
   0.0%    99.9%       0.002s       1.97e-03s      1   263   Elemwise{Composite{[true_div(mul(i0, i1), i2)]}}[(0, 1)](InplaceDimShuffle{x,0,1,
   0.0%    99.9%       0.002s       1.92e-03s      1   105   Elemwise{Add{output_types_preference=transfer_type{0}}}[(0, 0)](Dot22.0, InplaceD
   0.0%    99.9%       0.002s       1.82e-03s      1   146   Elemwise{Composite{[sub(add(i0, i1), i2)]}}[(0, 1)](TensorConstant{-1}, Elemwise{
   0.0%    99.9%       0.002s       1.70e-03s      1   251   Elemwise{Composite{[exp(mul(i0, i1))]}}[(0, 1)](TensorConstant{(1, 1, 1, ..) of 1
   0.0%    99.9%       0.002s       1.62e-03s      1   103   Elemwise{Composite{[Composite{[Composite{[Switch(i0, Switch(i1, i2, i3), Switch(i
   0.0%    99.9%       0.002s       1.59e-03s      1   114   Alloc(TensorConstant{0.0}, Elemwise{Composite{[Composite{[Composite{[Composite{[C
   0.0%   100.0%       0.002s       1.58e-03s      1    85   Elemwise{Composite{[Composite{[Composite{[Composite{[Composite{[Switch(LT(i0, i1)
   0.0%   100.0%       0.001s       1.50e-03s      1   445   Gemm{inplace}(W, TensorConstant{-0.00999999977648}, x.T012345678, Elemwise{Mul{ou
   0.0%   100.0%       0.001s       1.21e-03s      1    27   Elemwise{mul,no_inplace}(TensorConstant{20}, <TensorType(int64, scalar)>)
   0.0%   100.0%       0.001s       8.22e-04s      1    89   Elemwise{Composite{[tanh(add(i0, i1))]}}[(0, 0)](Dot22.0, InplaceDimShuffle{x,0}.
   0.0%   100.0%       0.001s       7.07e-04s      1   447   Elemwise{Composite{[add(mul(i0, i1), mul(i0, i2), mul(i0, i3), mul(i0, i4), mul(i
   ... (remaining 430 Apply instances account for 0.04%(0.02s) of the runtime)